---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prom-stack
  namespace: kube-prom-stack
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 78.2.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
  interval: 5m
  releaseName: kube-prom-stack
  targetNamespace: kube-prom-stack
  values:
    defaultRules:
      create: false

    alertmanager:
      enabled: false

    grafana:
      ingress:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          cert-manager.io/cluster-issuer: "letsencrypt"
          nginx.ingress.kubernetes.io/auth-response-headers: Authorization
          nginx.ingress.kubernetes.io/auth-url: "https://oauth2.tmem.de/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://oauth2.tmem.de/oauth2/start?rd=$scheme://$host$request_uri"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            auth_request_set  $user   $upstream_http_x_auth_request_user;
            auth_request_set  $email  $upstream_http_x_auth_request_email;
            proxy_set_header  X-Auth-Request-User   $user;
            proxy_set_header  X-Auth-Request-Email  $email;
        hosts:
          - &host grafana.tmem.de
        tls:
          - hosts:
              - *host
            secretName: grafana-tls

      defaultDashboardsEnabled: false

      sidecar:
        alerts:
          enabled: true
          label: "grafana_alert"
          labelValue: "1"
          skipReload: false

      additionalDataSources:
        - name: Loki
          type: loki
          access: proxy
          uid: loki
          version: 1
          url: http://loki-gateway.loki

      grafana.ini:
        root_url: "https://grafana.tmem.de"
        users:
          # disable user signup / registration
          allow_sign_up: false
          # Set to true to automatically assign new users to the default organization (id 1)
          auto_assign_org: true
          # Default role new users will be automatically assigned (if auto_assign_org above is set to true)
          auto_assign_org_role: Admin

        auth.proxy:
          # Defaults to false, but set to true to enable this feature
          enabled: true
          # HTTP Header name that will contain the username or email
          header_name: X-Auth-Request-User
          # HTTP Header property, defaults to `username` but can also be `email`
          header_property: username
          # Set to `true` to enable auto sign up of users who do not exist in Grafana DB. Defaults to `true`.
          auto_sign_up: true
          # Define cache time to live in minutes
          # If combined with Grafana LDAP integration it is also the sync interval
          sync_ttl: 60
          # Limit where auth proxy requests come from by configuring a list of IP addresses.
          # This can be used to prevent users spoofing the X-WEBAUTH-USER header.
          # Example `whitelist: 192.168.1.1, 192.168.1.0/24, 2001::23, 2001::0/120`
          whitelist:
          # Optionally define more headers to sync other user attributes
          # Example `headers: Name:X-WEBAUTH-NAME Role:X-WEBAUTH-ROLE Email:X-WEBAUTH-EMAIL Groups:X-WEBAUTH-GROUPS`
          headers: "Name:X-Auth-Request-User Email:X-Auth-Request-Email"
          # Non-ASCII strings in header values are encoded using quoted-printable encoding
          ;headers_encoded: false
          # Check out docs on this for more details on the below setting
          enable_login_token: false

    prometheus:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "internal-nginx"
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          cert-manager.io/cluster-issuer: "letsencrypt"
        hosts:
          - &host prometheus.internal.tmem.de
        tls:
          - hosts:
              - *host
            secretName: prometheus-tls

      prometheusSpec:
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        tolerations:
        - effect: NoSchedule
          key: cloud
          operator: Exists
