---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  namespace: *app
spec:
  chart:
    spec:
      chart: app-template
      version: 4.1.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  interval: 5m
  releaseName: *app
  targetNamespace: *app
  dependsOn:
    - name: sabnzbd
      namespace: sabnzbd
  values:
    controllers:
      radarr:
        type: statefulset
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 911
            runAsGroup: 911
            fsGroup: 0
            fsGroupChangePolicy: OnRootMismatch
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr
              tag: 5.20.1.9773
            env:
              RADARR__APP__INSTANCENAME: *app
              RADARR__APP__THEME: "dark"
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__PORT: &port 80
              RADARR__UPDATE__BRANCH: "develop"
              TZ: "Europe/Berlin"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ "ALL" ] }
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        className: "nginx-internal"
        annotations:
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          cert-manager.io/cluster-issuer: "letsencrypt"
        hosts:
          - host: &host radarr.internal.tmem.de
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: radarr-tls
    persistence:
      config:
        existingClaim: radarr-config-pvc
      logs:
        type: emptyDir
      media:
        existingClaim: radarr-media-pvc
        globalMounts:
          - path: /mnt/internal/media/films
      downloads:
        existingClaim: radarr-downloads-pvc
        globalMounts:
          - path: /mnt/internal/media/downloads
      tmp:
        type: emptyDir